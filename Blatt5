#lang racket
#| SE 3 FP Hausaufgaben Blatt 05, Blaesch, Ramburger, Ney |#
(require se3-bib/butterfly-module)
#|
Aufgabe 1.1

Gliederung:

Hauptfunktion:
Eine Funktion, bei uns drawChildren, in der wir die dominanten Merkmale des Vaters, der Mutter und die Anzahl der zu
zeichnenden Kinder übergeben. Diese sorgt dann nur für die richtige Anzahl zu zeichnender Kinder.

Nebenfunktionen:

Eine Nebenfunktion (randomUebergebeneGene)erstellt aus den dominanten Merkmalen der Eltern eine Liste zufällig ausgewählter Merkmale.
Eine weiter Nebenfunktion (createChild) nimmt diese beiden Listen, fügt sie zu den dominanten Merkmalen des Kindes zusammen und
zeichnet dann dieses Kind.

Hilfsfunktionen:

Eine Funktion(randomListPick), welche ein Element aus einer übergebenen Liste wiedergibt
Zudem Brauchen wir eine Funktion(getDominantOfList), welche die die Dominanten Merkmale von gemischten Listen der Elter richtig wiedergibt.


Datenstrukturen:

Wir brauchen eine Liste von Listen um die Dominazregeln einfach darzustellen.
Dabei gilt als Reihenfolge der vier Sublisten: Farbe, Muster, Fühlerform, Flügelform.
Diese Sublisten sind ebenfalls so anzuordnen, dass ganz links das dominanteste Merkmal
steht und immer weiter rechts rezessivere Merkmale folgen. 


Begründung:
Das Benutzen von Listen sorgt immer dafür das die Dominanzregeln in richtiger Reihenfolge
sind und ermöglicht einen einfachen Umgang mit denn Eigenschaften.
|#


(define alleMerkmale
  (list
       (list 'green 'red 'blue 'yellow)
       (list 'star 'dots 'stripes)
       (list 'straight 'curly 'curved)
       (list 'rhomb 'ellipse 'hexagon)
       )
  )

(define (randomListPick liste)
  (list-ref liste (random (length liste))))

(define (getDominantOfList merkmalList list)
  (if
   (empty? merkmalList)
   '()
  (if
    (list? (member (car merkmalList) list))
    (car merkmalList)
    (getDominantOfList (cdr merkmalList) list)
    )
   )
  )

(define (randomUebergebeneGene dominantGene)
      (map randomListPick(map list dominantGene(map randomListPick(map member dominantGene alleMerkmale)))))

(define (createChild motherDominant fatherDominant)
  (let 
      (
      [childAttributs (map getDominantOfList alleMerkmale (map list (randomUebergebeneGene motherDominant) (randomUebergebeneGene fatherDominant)))]
      )
      (display (show-butterfly (car childAttributs) (cadr childAttributs) (caddr childAttributs) (cadddr childAttributs))))
  )

(define (drawChildren motherDominant fatherDominant children)
  (createChild motherDominant fatherDominant)
  (if
   (> children 1)
   (drawChildren motherDominant fatherDominant (- 1 children))
   (display "\n")
  )
)

; Form:(drawChildren (list 'red 'star 'curly 'ellipse )(list 'red 'star 'curly 'ellipse ) 2 )
