#lang racket
#| SE 3 FP Hausaufgaben Blatt 05, Blaesch, Ramburger, Ney |#
(require se3-bib/butterfly-module)
#|
Aufgabe 1.1

Gliederung:

Hauptfunktion:
Eine Funktion, bei uns drawChildren, in der wir die dominanten Merkmale des Vaters, der Mutter und die Anzahl der zu
zeichnenden Kinder übergeben. Diese sorgt dann nur für die richtige Anzahl zu zeichnender Kinder.

Nebenfunktionen:

Eine Nebenfunktion (randomUebergebeneGene)erstellt aus den dominanten Merkmalen der Eltern eine Liste zufällig ausgewählter Merkmale.
Eine weiter Nebenfunktion (createChild) nimmt diese beiden Listen, fügt sie zu den dominanten Merkmalen des Kindes zusammen und
zeichnet dann dieses Kind.

Hilfsfunktionen:

Eine Funktion(randomListPick), welche ein Element aus einer übergebenen Liste wiedergibt
Zudem Brauchen wir eine Funktion(getDominantOfList), welche die die Dominanten Merkmale von gemischten Listen der Elter richtig wiedergibt.


Datenstrukturen:

Wir brauchen eine Liste von Listen um die Dominazregeln einfach darzustellen.
Dabei gilt als Reihenfolge der vier Sublisten: Farbe, Muster, Fühlerform, Flügelform.
Diese Sublisten sind ebenfalls so anzuordnen, dass ganz links das dominanteste Merkmal
steht und immer weiter rechts rezessivere Merkmale folgen. 


Begründung:
Das Benutzen von Listen sorgt immer dafür das die Dominanzregeln in richtiger Reihenfolge
sind und ermöglicht einen einfachen Umgang mit denn Eigenschaften.
|#


;Eine Liste mit Unterlisten für:
;Farbe
;Muster
;Fühlerform
;Flügelform
;Je weiter links das Merkmal in den Unterlisten steht, desto Dominanter ist es
(define alleMerkmale
  (list
       (list 'green 'red 'blue 'yellow)
       (list 'star 'dots 'stripes)
       (list 'straight 'curly 'curved)
       (list 'rhomb 'ellipse 'hexagon)
       )
  )

;Eine Hilfsfunktion, die ein zufälliges Element aus einer Liste wiedergibt
(define (randomListPick liste)
  (list-ref liste (random (length liste))))

;Eine Hilfsfunktion, welche die Liste der Merkmale durchgeht und das erste
;Element welches aus einer anderen Liste kommt wiedergibt
;(getDominantOfList '(a b c d) '(c d)) --> c
;(getDominantOfList '(d b a c) '(c d)) --> d
(define (getDominantOfList merkmalList list)
  (if
   (empty? merkmalList)
   '()
  (if
    (list? (member (car merkmalList) list))
    (car merkmalList)
    (getDominantOfList (cdr merkmalList) list)
    )
   )
  )

;Nimmt die Liste dominanter Merkmale, ermittel dann die rezessiven Merkmale, wählt dann jeweils
;ein rezssives Merkmal aus um sie dann mit den dominanten Merkmalen wieder zusammenzufügen und dann jeweils
;etwa die rezessiven oder dominanten Merkmale auszugeben 
(define (randomUebergebeneGene dominantGene)
      (map randomListPick(map list dominantGene(map randomListPick(map member dominantGene alleMerkmale)))))

;Durch die obere Funktion erhalten wir die zufälligen Merkmale der Elter aus denen wir, mit
;Berücksichtigung der Dominanzregeln, die Merkmale des Kindes bestimmen
;Danach zeichnen wir das Kind.
(define (createChild motherDominant fatherDominant)
  (let 
      (
      [childAttributs (map getDominantOfList alleMerkmale (map list (randomUebergebeneGene motherDominant) (randomUebergebeneGene fatherDominant)))]
      )
      (display (show-butterfly (car childAttributs) (cadr childAttributs) (caddr childAttributs) (cadddr childAttributs))))
  )

;Zeichnet count-viele Kinder, durch Übergabe der Dominanten Merkmale der Eltern als Liste
;Bsp. (drawChildren (list 'blue 'stripes 'curved 'hexagon)(list 'red 'star 'curly 'ellipse ) 2 )
(define (drawChildren motherDominant fatherDominant count)
  (createChild motherDominant fatherDominant)
  (if
   (> count 1)
   (drawChildren motherDominant fatherDominant (- 1 count))
   (display "\n")
  )
)


;Testfälle

;Sinnvoll um die Dominanzregeln zu testen

;Dominanteste Merkmale --> Hohe Warscheinlichkeit das Kinder 'green 'star 'straight 'rhomb werden
(drawChildren (list 'green 'star 'straight 'rhomb)(list 'green 'star 'straight 'rhomb) 2 )

;Immer Gleich bleibende Kinder, da die rezessivsten Merkmale genommen wurden
(drawChildren (list 'yellow 'stripes 'curved 'hexagon)(list 'yellow 'stripes 'curved 'hexagon) 2 )

;Dominanteste Merkmale eine Elterteils und rezzesivte Mermale eines ELternteils --> Große Vielfalt der Kinder
(drawChildren (list 'green 'star 'straight 'rhomb)(list 'yellow 'stripes 'curved 'hexagon) 2 )



