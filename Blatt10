#lang racket

;Sudokuspiel als Vektor
(define spiel #(0 0 0 0 0 9 0 7 0
                0 0 0 0 8 2 0 5 0
                3 2 7 0 0 0 0 4 0
                0 1 6 0 4 0 0 0 0
                0 5 0 0 0 0 3 0 0
                0 0 0 0 9 0 7 0 0
                0 0 0 6 0 0 0 0 5
                8 0 2 0 0 0 0 0 0
                0 0 4 2 0 0 0 0 8 ))

(define spielGeloest #(6 8 5 4 3 9 2 7 1
                       4 9 1 7 8 2 6 5 3
                       3 2 7 5 6 1 8 4 9
                       9 1 6 3 4 7 5 8 2
                       7 5 8 1 2 6 3 9 4
                       2 4 3 8 9 5 7 1 6
                       1 3 9 6 7 8 4 2 5
                       8 6 2 9 5 4 1 3 7
                       5 7 4 2 1 3 9 6 8 ))

(define spielFail #(   1 2 1 1 0 9 0 7 0
                       0 0 0 0 8 2 0 5 0
                       3 2 7 6 0 0 0 4 0
                       0 1 6 0 4 0 0 0 0
                       0 5 0 0 0 0 3 0 0
                       0 0 0 0 9 0 7 0 0
                       0 0 0 6 0 0 0 0 5
                       8 0 2 0 0 0 7 5 0
                       0 0 4 2 0 0 0 0 8 ))

;Aufgabe 1
;Gibt ein Index wieder durch Angabe der Spalte und Zeile
(define (xy->index xSpalte yZeile)
  (sub1 (+ (add1 xSpalte) (* yZeile 9))))

;Aufgabe 2
;Gibt eine Zeile aus dem Spiel als Liste wieder
(define (zeile->indizes xZeile)
  (map (lambda (x) (+ (* xZeile 9) x)) '(0 1 2 3 4 5 6 7 8)))

;Gibt eine Spalte aus dem Spiel als Liste wieder
(define (spalte->indizes xSpalte)
  (map (lambda (x) (+ xSpalte x))'(0 9 18 27 36 45 54 63 72)))

;Gibt einen Quadrant aus dem Spiel als Liste wieder
(define (quadrant->indizes xQuadrant)
  (if (< xQuadrant 3)
      (map (lambda (x) (+ (* 3 xQuadrant) x)) '(0 1 2 9 10 11 18 19 20))
      (if (< xQuadrant 6)
          (map (lambda (y) (+ (* 3 (- xQuadrant 3)) y)) '(27 28 29 36 37 38 45 46 47))
          (if (< xQuadrant 9)
          (map (lambda (z) (+ (* 3 (- xQuadrant 6)) z)) '(54 55 56 63 64 65 72 73 74))
          (write "Quadranten nur 0 bis 8")))))

;Aufgabe 3
;Gibt die Zahlen an den Bereichen(Zeile, Spalte oder Quadrant) wieder
(define (spiel->eintraege spiel funkBereich)
  (map (lambda (x) (list-ref (vector->list spiel) x)) funkBereich))

;Aufgabe 4
;Hilfsfunktionen um zu prüfen ob die Zeilen, Spalten und Quadranten konsistent sind, wenn ja erhalten wir eine Liste mit 9 Mal #f für jede Funktion
(define (löscheNull liste)
  (remove* '(0) liste))

(define (checkAlleZeilen spiel)
  (count false? (map check-duplicates (map löscheNull (map (lambda (x) (spiel->eintraege spiel (zeile->indizes x))) (range 0 9))))))

(define (checkAlleSpalten spiel)
  (count false? (map check-duplicates (map löscheNull (map (lambda (x) (spiel->eintraege spiel (spalte->indizes x))) (range 0 9))))))

(define (checkAlleQuadranten spiel)
  (count false? (map check-duplicates (map löscheNull (map (lambda (x) (spiel->eintraege spiel (quadrant->indizes x))) (range 0 9))))))

;Hauptfunktionen
;Wenn das Spiel konsistent ist haben wir in keiner Zeile,Spalte und Quadranten doppelte Zahlen(0 Ausgeschlossen), daher haben wir 9Zeilen+9Spalten+9Quadranten=27 abfragen, wenn nirgendwo doppelte Zahlen -> 27 mal false.
(define (spiel-konsistent? spiel)
  (if (eq? 27 (+ (checkAlleQuadranten spiel) (checkAlleSpalten spiel) (checkAlleZeilen spiel)))
      #t
      #f))
;Damit ein spiel geloest ist müssen alle Felder mit Zahlen außer Null belegt sein und das Spiel muss Konistent sein.
(define (spiel-geloest? spiel)
  (if (< 0 (count zero? (vector->list spiel)))
      #f
      (if(spiel-konsistent? spiel)
         #t
         #f)))
